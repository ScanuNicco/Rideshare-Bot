const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
var LocalStorage = require('node-localstorage').LocalStorage;
const { Offer, Request } = require('../rideEventBuilder.js');
const Logger = require("../logger.js");
const pg = require('../connectPostgres.js');

module.exports = {
	data: new SlashCommandBuilder()
		.setName('writeupdate')
		.setDescription('Write the daily update'),
	async execute(interaction) {
        var update = await writeUpdate(false);
        if(update != false) {
			await interaction.reply(`**${interaction.user.username}** requested a daily update:`);
            interaction.channel.send({embeds: [update]});
        } else {
            await interaction.reply({content: "No one posted any rides today, so no update will be sent.", ephemeral: true});
        }
	}, getUpdateContent() {
        return writeUpdate();
    },
};

async function writeUpdate(isAutomatic) {
	Logger.logDebug("Daily Update Started:");
	var pgClient = pg.getNewClient();
    await pgClient.connect();
    var updateQuery = 'SELECT * from getDailyUpdate()';
	const pgResponse = await pgClient.query(updateQuery);
    var dailyUpdate =  pgResponse.rows;
    var now = new Date();
    const update = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle("Daily Update " + (now.getMonth() + 1) + "/" + now.getDate() + "/" + now.getFullYear());

	if(isAutomatic){
		update.setFooter({text: "Daily updates are automatically sent at 11:00pm. Use `/writeupdate` to generate a new one."});
	} else {
		update.setFooter({text: "This update was generated by a user."});
	}
        
	//var rides = Offer.loadEvents();
    //var requests = Request.loadEvents();
    //Logger.logDebug("	Offers: " + Object.keys(rides).length);
    //Logger.logDebug("	Requests: " + Object.keys(requests).length);
	//const HOURS_24 = 24*60*60*1000; //Note: Javascript timestamps are in **Milliseconds**
	//Logger.logDebug(`	Looking for RideEvents within ${HOURS_24} of ${now.getTime()}`)
	var requestText = "";
	var offerText = "";
	for(const ride of dailyUpdate){
		//ride = new Offer(rides[key]);
        Logger.logDebug(ride);
		Logger.logDebug(typeof ride.departuretime);
		if(ride.isoffer) {
			offerText += `${ride.displayname} is offering a ride from ${ride.originname} to ${ride.destinname} on ${Offer.getTimeString(ride.departuretime)}. ${Offer.genRideLink(ride.messageid, ride.channelid, ride.guildid)}\n`;
		} else {
			requestText += `${ride.displayname} is looking for a ride from ${ride.originname} to ${ride.destinname} on ${Request.getTimeString(ride.departuretime)}. ${Request.genRideLink(ride.messageid, ride.channelid, ride.guildid)}\n`;
		}
	}
	if(offerText != "") {
        update.addFields({name: "Offering Rides:", value: offerText});
    }
    if(requestText != "") {
        update.addFields({name: "Requesting Rides:", value: requestText});
    }
	pgClient.end();
	if((offerText == "" && requestText == "")){
		Logger.logDebug("	No RideEvents in timeframe. Update will not be sent!")
		return false; //If there were no new rides today, return false
	} else {
		Logger.logDebug("	Update will be sent!")
		return update;
	}

}
